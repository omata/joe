# https://taskfile.dev

version: '3'

silent: true

env:
  GOPROXY: direct

tasks:
  build:windows:386:
    desc: Build a X86 version of joe for Windows.
    cmds:
      - echo "--->  Building X86 Windows binary..."
      - go build -ldflags "-s -w" -o build/win-x86/joe.exe joe.go utils.go && echo -e "--->  Build Done!" || echo -e "--->  There was a problem."
    sources:
      - joe.go
      - utils.go
    generates:
      - build/win-x86/joe.exe
    env:
      GOOS: windows
      GOARCH: 386

  build:windows:amd64:
    desc: Build a AMD64 version of joe for Windows.
    cmds:
      - echo "--->  Building AMD64 Windows binary..."
      - go build -ldflags "-s -w" -o build/win-amd64/joe.exe joe.go utils.go && echo -e "--->  Build Done!" || echo -e "--->  There was a problem."
    sources:
      - joe.go
      - utils.go
    generates:
      - build/win-amd64/joe.exe
    env:
      GOOS: windows
      GOARCH: amd64

  build:linux:386:
    desc: Build X86 version of joe for Linux.
    cmds:
      - echo "--->  Building X86 Linux binary..."
      - go build -ldflags "-s -w" -o build/linux-x86/joe joe.go utils.go && echo -e "--->  Build Done!" || echo -e "--->  There was a problem."
    sources:
      - joe.go
      - utils.go
    generates:
      - build/linux-x86/joe
    env:
      GOOS: linux
      GOARCH: 386

  build:linux:arm:
    desc: Build ARM version of joe for Linux.
    cmds:
      - echo "--->  Building ARM Linux binary..."
      - go build -ldflags "-s -w" -o build/linux-arm/joe joe.go utils.go && echo -e "--->  Build Done!" || echo -e "--->  There was a problem."
    sources:
      - joe.go
      - utils.go
    generates:
      - build/linux-arm/joe
    env:
      GOOS: linux
      GOARCH: arm

  build:linux:amd64:
    desc: Build AMD64 version of joe for Linux.
    cmds:
      - echo "--->  Building AMD64 Linux binary..."
      - go build -ldflags "-s -w" -o build/linux-amd64/joe joe.go utils.go && echo -e "--->  Build Done!" || echo -e "--->  There was a problem."
    sources:
      - joe.go
      - utils.go
    generates:
      - build/linux-amd64/joe
    env:
      GOOS: linux
      GOARCH: amd64

  build:linux:arm64:
    desc: Build ARM64 version of joe for Linux.
    cmds:
      - echo "--->  Building ARM64 Linux binary..."
      - go build -ldflags "-s -w" -o build/linux-arm64/joe joe.go utils.go && echo -e "--->  Build Done!" || echo -e "--->  There was a problem."
    sources:
      - joe.go
      - utils.go
    generates:
      - build/linux-arm64/joe
    env:
      GOOS: linux
      GOARCH: arm64

  build:darwin:amd64:
    desc: Build a AMD64 version of joe for MacOS.
    cmds:
      - echo "--->  Building AMD64 MacOS AMD64 binary..."
      - go build -ldflags "-s -w" -o build/darwin-amd64/joe joe.go utils.go && echo -e "--->  Build Done!" || echo -e "--->  There was a problem."
    sources:
      - joe.go
      - utils.go
    generates:
      - build/darwin-amd64/joe
    env:
      GOOS: darwin
      GOARCH: amd64

  build:darwin:arm64:
    desc: Build a 64 bit ARM64 version of joe for MacOS.
    cmds:
      - echo "--->  Building ARM64 MacOS ARM64 binary..."
      - go build -ldflags "-s -w" -o build/darwin-arm64/joe joe.go utils.go && echo -e "--->  Build Done!" || echo -e "--->  There was a problem."
    sources:
      - joe.go
      - utils.go
    generates:
      - build/darwin-arm64/joe
    env:
      GOOS: darwin
      GOARCH: arm64

  build:all:
    desc: Build binaries for all architecrture and platforms.
    cmds:
      - task: clean
      - task: build:windows:386
      - task: build:windows:amd64
      - task: build:linux:386
      - task: build:linux:arm
      - task: build:linux:amd64
      - task: build:linux:arm64
      - task: build:darwin:amd64
      - task: build:darwin:arm64
      - task: compress

  clean:
    desc: Clean up the environment.
    cmds:
      - rm -rf build
      - rm -rf pkg
      - rm -rf .task

  compress:
    desc: Compress all generated binaries with zstd algorithm.
    cmds:
      - test -d pkg || mkdir pkg
      - for joebin in $(ls build) ; do tar cfv - ./build/${joebin} | zstd --ultra -22 - -f -o pkg/"${joebin}.tar.zst"; done
    sources:
      - build/win-x86/joe.exe
      - build/win-amd64/joe.exe
      - build/linux-x86/joe
      - build/linux-arm/joe
      - build/linux-amd64/joe
      - build/linux-arm64/joe
      - build/darwin-amd64/joe
      - build/darwin-arm64/joe
    generates:
      - pkg/win-x86.tar.zst
      - pkg/win-amd64.tar.zst
      - pkg/linux-x86.tar.zst
      - pkg/linux-arm.tar.zst
      - pkg/linux-amd64.tar.zst
      - pkg/linux-arm64.tar.zst
      - pkg/darwin-amd64.tar.zst
      - pkg/darwin-arm64.tar.zst
